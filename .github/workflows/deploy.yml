name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Docker 환경 세팅
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # .env.production 파일 생성 Append
      - name: Append secrets to existing .env.production
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.ENV_NEXT_PUBLIC_API_URL }}" >> .env.production
          echo "INTERNAL_SECRET_KEY=${{ secrets.ENV_INTERNAL_SECRET_KEY }}" >> .env.production

      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t nextjs-app:latest -f Dockerfile.prod .

      # 4. Docker 이미지 tar 파일로 저장 + 권한 부여
      - name: Save Docker image to tar file
        run: |
          docker save nextjs-app:latest -o nextjs-app.tar
          chmod 644 nextjs-app.tar
          ls -al nextjs-app.tar

      # 5. EC2 서버로 tar 파일 전송
      - name: Send Docker image to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "nextjs-app.tar"
          target: "~/"

      # 6. EC2에 접속해서 Docker 이미지 로드 및 컨테이너 실행
      - name: SSH into EC2 and deploy container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker stop nextjs-app || true
            docker rm nextjs-app || true
            docker load -i ~/nextjs-app.tar
            docker run -d --name nextjs-app -p 3000:3000 nextjs-app:latest
